#include "objectQuery.hpp"

namespace objsearch {
    namespace objectquery {
	ObjectQuery::ObjectQuery(int argc, char *argv[]){
	    ros::init(argc, argv, "object_query");
	    ros::NodeHandle handle;

	    // Retrieve the directory containing the cloud to be processed
	    ROSUtil::getParam(handle, "/object_query/query_features", queryFile);
	    // Retrieve the directory containing the cloud of features generated by
	    // feature extraction
	    ROSUtil::getParam(handle, "/object_query/target_features", targetFile);

	    // Extract the K parameter specified in the launch file. If it is
	    // still at the default value of -1, read the parameter from the
	    // param file instead.
	    ROSUtil::getParam(handle, "/object_query/K", K);
	    if (K == -1){
		ROSUtil::getParam(handle, "/obj_search/object_query/K", K);
	    }

	    ROSUtil::getParam(handle, "/obj_search/raw_data_dir", dataPath);
	    
	    // If the given cloud file corresponds to a file in the raw data directory,
	    // extract the remaining directories in the path of the file so that the
	    // data can be put into the output directory with the same path.
	    if (queryFile.compare(0, dataPath.size(), dataPath) == 0){
		dataSubDir = SysUtil::trimPath(std::string(queryFile, dataPath.size()), 1);
	    }

	    ROSUtil::getParam(handle, "/object_query/output_dir", outDir);
	    // If output is not specified, set the output directory to be the processed
	    // data directory specified by the global parameters.
	    if (std::string("NULL").compare(outDir) == 0) {
		ROSUtil::getParam(handle, "/obj_search/processed_data_dir", outDir);
	    }

	    // The output path for processed clouds is the subdirectory combined
	    // with the top level output directory. If dataSubDir is not
	    // initialised, then clouds are simply output to the top level
	    // output directory
	    outPath = SysUtil::combinePaths(outDir, dataSubDir);

	    // Read the headers for the point clouds that were provided as
	    // input, and look at the field names to determine which descriptor
	    // type is stored in the cloud.
	    pcl::PCDReader reader;
	    pcl::PCLPointCloud2 targetHeader;
	    reader.readHeader(targetFile, targetHeader);
	    std::string targetField = targetHeader.fields[0].name;
	    
	    pcl::PCLPointCloud2 queryHeader;
	    reader.readHeader(queryFile, queryHeader);
	    std::string queryField = queryHeader.fields[0].name;

	    // The descriptors for both clouds must be the same, otherwise we
	    // cannot compare them.
	    if (queryField.compare(targetField) != 0){
		ROS_ERROR("Fields of the two descriptor clouds do not match: \n"\
			  "Query: %s, target: %s", queryField.c_str(), targetField.c_str());
		exit(1);
	    }

	    // Depending on the type of the descriptor in the cloud, we need to
	    // instantiate a different template for the search function
	    if (queryField.compare("shot") == 0) {
		doSearch<pcl::SHOT352>();
	    } else if (queryField.compare("shape_context") == 0) {
		doSearch<pcl::ShapeContext1980>();
	    } else {
		ROS_ERROR("Unknown descriptor field specifier: %s", queryField.c_str());
                exit(1);
	    }
	}

	template<typename DescType>
	void ObjectQuery::doSearch() {
	    ROS_INFO("Starting descriptor search.");
	    
	    pcl::PCDReader reader;

	    // Read the input clouds for the target and query descriptors. We
	    // want to find descriptors in targetCloud which are close to those
	    // in queryCloud. Need to use typename here because of dependent
	    // scope - what it is depends on the instantiation of the template
	    // argument
	    typename pcl::PointCloud<DescType>::Ptr targetCloud(new pcl::PointCloud<DescType>());
	    typename pcl::PointCloud<DescType>::Ptr queryCloud(new pcl::PointCloud<DescType>());
	    std::cout << reader.read(targetFile, *targetCloud) << std::endl;
	    std::cout << reader.read(queryFile, *queryCloud) << std::endl;

	    // Create a flannsearch object to use to do the NN search
	    typename pcl::search::FlannSearch<DescType, flann::L2<float> > *search(new pcl::search::FlannSearch<DescType, flann::L2<float> >());
	    // Flann needs to know the point representation so that it can
	    // convert it to its internal format
	    typename pcl::DefaultPointRepresentation<DescType>::ConstPtr descRepr(new pcl::DefaultPointRepresentation<DescType>());
	    search->setPointRepresentation(descRepr);
	    search->setInputCloud(targetCloud);

	    // Initialise vectors to store the closest K points to the query point.
	    std::vector<int> indices(K);
	    std::vector<float> square_dists(K);
	    search->nearestKSearch(queryCloud->points[0], K, indices, square_dists);

	    ROS_INFO("Search complete");
	    
	    for (int i = 0; i < K; i++) {
		ROS_INFO("Index: %d, distance: %f", indices[i], square_dists[i]);
	    }
	}


    } // namespace objectquery
} // namespace obj_search

int main(int argc, char *argv[]) {
    objsearch::objectquery::ObjectQuery oq(argc, argv);
    
    return 0;
}
